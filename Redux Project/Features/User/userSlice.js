import {createSlice,createAsyncThunk} from '@reduxjs/toolkit'
import axios from 'axios'

const initialState={
    loading:false,
    users:[],
    error:''
}

//The below will create pending,fulfilled,rejected action types for the below promise by default
//We can listen to these action types with a reducer function and perform the necessary state transitions

export const fetchUsers=createAsyncThunk('user/fetchUser',()=>{
    axios.get('https://jsonplaceholder.typicode.com/users')
    .then(response=>response.data.map(user=>user.id))
})


//The reducers are not generated by slice and should be added by extraReducers
const userSlice=createSlice({
    name:'user',
    initialState:initialState,
    extraReducers:builder=>{
        builder.addCase(fetchUsers.pending,state=>{
            state.loading=true
        })
        builder.addCase(fetchUsers.fulfilled,(state,action)=>{
            state.loading=false,
            state.users=action.payload,
            state.error=''
        })
        builder.addCase(fetchUsers.rejected,(state,action)=>{
            state.loading=false,
            state.users=[],
            state.error='action.error.message'
        })
    }
})

export default userSlice.reducer

/*
const fetchUsers=createAsyncThunk('user/fetchUser',()=>{
    axios.get('https://jsonplaceholder.typicode.com/users')
    .then(response=>response.data.map(user=>user.id))
})

The function accepts two parameters
First parameter is action name user/fetchUser'
second argument is a arrowfunction that creates the payload


*/